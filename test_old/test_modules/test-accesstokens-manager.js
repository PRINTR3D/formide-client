var _ = require('lodash'),    fs = require('fs'),    path = require('path');// template for the accesstokens file// using {{ value }} as a patternvar fileContent ='{"k":"{{ key }}","o":"0000000302","v":"{{ value }}"}\n\{"_id":{{ id }},"_uid":{{ uid }},"_dt":1439894033367,"_s":"f98f5708aef64e30905b486fa9276927"}\n\{"createdAt":{"$wrap":"$date","v":1439894033355,"h":"{{ currentDate }}"},\"updatedAt":{"$wrap":"$date","v":1439894033355,"h":"{{ currentDate }}"},\"token":"{{ token }}","user":"{{ id }}","sessionOrigin":"{{ sessionOrigin }}",\"_id":{"$wrap":"$oid","v":{{ id }}},"permissions":[{{ permissions }}],"__v":0}\n';var backupExtension = '.backup';module.exports = function(storageDir, data) {    // e.g.: /home/you/formideos/database/accesstokens    var tokenFilepath = path.join(storageDir, 'database/accesstokens');    return {        // backup the accesstokens file in the database directory:        // rename the file with the same name plus the new extension defined by newExtension        backupCurrentFile: function backupCurrentFile() {            // save the current accesstokens file            fs.rename(tokenFilepath, tokenFilepath + backupExtension,                function (err) {                    if (err) throw err;                }            );        },        // delete and restore the previous accestokens file        restorePreviousFile: function restorePreviousFile() {            // delete accesstokens test file            fs.unlinkSync(tokenFilepath);            // restore previous accesstokens file            fs.rename(tokenFilepath + backupExtension, tokenFilepath,                function (err) {                    if (err) throw err;                }            );        },        // create a new accesstokens file for testing purpose        createNewFile: function createNewFile() {            // generate the output text with the template and the data            _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;            var compiled = _.template(fileContent);            //var dataCopy = JSON.parse(JSON.stringify(data));            var dataCopy = {                key: data.key,                value: data.value,                id: data.user.id,                uid: data.user.uid,                currentDate: data.currentDate,                token: data.token,                sessionOrigin: data.user.sessionOrigin            };            // tranforms [perm1, perm2] to ["perm1", "perm2"] for the template            var permissions = [];            _.forEach(data.user.permissions, function(p) {                permissions.push('"' + p + '"');            });            dataCopy.permissions = permissions;            var output = compiled(dataCopy);            // create new file            fs.writeFile(tokenFilepath, output, 'utf8', function (err) {                if (err) throw err;            });        }    };};