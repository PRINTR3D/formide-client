#!/usr/bin/env node

const program = require('commander');
const pkg     = require('../package.json');
const exec    = require('child_process').exec;
const chalk   = require('chalk');
const prompt  = require('prompt');

const ctl = program.version(pkg.version);

ctl
    .command('up')
    .option('-M, --memory-limit <MB>', 'Limit memory usage in MBs')
    .option('-E, --environment <ENV>', 'Select environment to run client in')
    .action(function(args) {
        args.environment = args.environment || 'production'; // default to production
        args.memoryLimit = args.memoryLimit || '1500';       // default to 1.5GB of memory
        const client = exec(`NODE_ENV=${args.environment} NODE_MEM_LIMIT=${args.memoryLimit} ./bin/formide-client`);

        client.stdout.on('data', (data) => {
          process.stdout.write(`${data}`);
        });

        client.stderr.on('data', (data) => {
          process.stdout.write(chalk.red(`${data}`));
        });

        client.on('close', (code) => {
          process.stdout.write(chalk.yellow(`formide-client process exited with code ${code}`));
        });
    });

ctl
    .command('init')
    .action(function(args) {
        console.info('Configuring formide-client...');

        // override default prompt message with empty string
        prompt.message = '';

        const promptSchema = {
            properties: {
                // TODO: questions to setup up client-implementation source,
            }
        };

        // run init questions
        prompt.get(promptSchema, function (err, result) {
            console.log('result', result);
        });
    });

ctl
    .command('clean')
    .action(function(args) {
        // TODO: clear user settings so you can start over, ask for confirmation
    });

ctl.parse(process.argv);