var accessTokensManager = require('./test-accesstokens-manager'),    modelFilesManager = require('./test-modelfiles-manager'),    configManager = require('./test-config-manager'),    chaiHttp = require('chai-http'),    chai = require('chai'),    uuid = require('node-uuid'),    fs = require('fs'),    path = require('path'),    url = require('url');chai.should();chai.use(chaiHttp);// homeDir: the FormideOS user file directory (set HOME or USERPROFILE)var homeDir = (process.env.HOME === undefined) ? process.env.USERPROFILE : process.env.HOME;var storageDir = path.join(homeDir, 'formideos');if (homeDir === undefined) throw new Error('Please set HOME or USERPROFILE');var readFile = function readFile(file) {    var result = [];    fs.readFileSync(file).toString().split('\n').forEach(function(line) {        try {            result.push(JSON.parse(line));        } catch (ignored) { /* nothing to do */ }    });    return result;};var generateUuid = function generateUuid() {    return uuid.v4();};var getCurrentDate = function getCurrentDate() {    return new Date().toISOString();};var loadConfig = function loadConfig() {    return JSON.parse(fs.readFileSync('test-config.json', 'utf8'));};var dataSetup = readFile(path.join(storageDir, 'database/users'));// token: known token to bypass authentication API regular methodvar data = {    key: dataSetup[0].k,    value: dataSetup[0].v,    user: {        id: dataSetup[1]._id,        uid: dataSetup[1]._uid,        sessionOrigin: 'local',        permissions: ['admin']    },    token: generateUuid(),    currentDate: getCurrentDate(),    server: {        address: 'localhost',        port: 1337,        storageDir: storageDir    },    modelfile: {        id: 2,        uid: 2,        filename: 'fake-file.stl',        filesize: 42,        hash: generateUuid()    }};module.exports = {    config: loadConfig,    generateHash: generateUuid,    accessTokensManager: accessTokensManager(storageDir, data),    modelFilesManager: modelFilesManager(storageDir, data),    configManager: configManager(data),    // helpers for the test cases    request: function request(apiUrl) {        return chai.request(url.resolve('http://' + data.server.address + ':' + data.server.port, apiUrl));    },    bearerToken: function bearerToken(req) {        //console.log('Token = ' + loadConfig().token);        req.set('Authorization', 'Bearer ' + loadConfig().token);    },    formEncodedContentType: function formEncodedContentType(req) {        req.set('Content-Type', 'application/x-www-form-urlencoded');    }};