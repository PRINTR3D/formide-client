var fs = require('fs'),    path = require('path');var testConfigFilename = 'test-config.json';module.exports = function(data) {        return {        createNewFile: function createNewFile() {            var formideOSClientDir = process.env.FOS_CLIENT;            if (formideOSClientDir === undefined) throw new Error('Please set FOS_CLIENT environment variable');            var setupConfig = JSON.parse(fs.readFileSync(path.join(formideOSClientDir, 'scripts/setup.json'), 'utf8'));            // JSON config to save            /*            var testConfig = {                user: {                    'id': data.id,                    'uid': data.uid,                    'email': setupConfig.users[0].email,                    'password': setupConfig.users[0].password                },                token: data.token,                date: data.currentDate,                sessionOrigin: data.sessionOrigin,                permissions: data.userPermissions            };*/            // just adding missing information            data.user.email = setupConfig.users[0].email;            data.user.password = setupConfig.users[0].password;            data.printer = {};            data.printer.name = setupConfig.printers[0].name;            data.printer.bed = setupConfig.printers[0].bed;            data.printer.extruders = setupConfig.printers[0].extruders;            data.sliceprofile = setupConfig.sliceprofiles[0];            // create JSON configuration file            fs.writeFile(testConfigFilename, JSON.stringify(data), 'utf8', function(err) {                if (err) throw err;            });        },        removeFile: function removeFile() {            try {                fs.unlinkSync(testConfigFilename);            } catch (e) {                //console.log('code = '+e.code);                if (e.code === 'ENOENT') {                    console.log('Configuration file not found!');                } else { // re-throw                    throw e;                }            }        }    };    };